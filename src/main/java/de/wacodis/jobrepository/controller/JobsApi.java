/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.wacodis.jobrepository.controller;

import de.wacodis.api.model.Error;
import de.wacodis.api.model.Job;
import de.wacodis.api.model.PaginatedJobResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-08-14T16:26:37.937+02:00[Europe/Berlin]")

@Validated
@Api(value = "jobs", description = "the jobs API")
public interface JobsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "createJob", notes = "Creates a new Job in the repository ", response = Job.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "job response ", response = Job.class),
        @ApiResponse(code = 200, message = "unexpected error ", response = Error.class) })
    @RequestMapping(value = "/jobs",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Job> createJob(@ApiParam(value = "Job to add to the repository" ,required=true )  @Valid @RequestBody Job job) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"useCase\" : \"useCase\",  \"processingTool\" : \"processingTool\",  \"created\" : \"2000-01-23T04:56:07.000+00:00\",  \"areaOfInterest\" : {    \"extent\" : [ -151.17018, -151.17018, -151.17018, -151.17018 ]  },  \"inputs\" : [ null, null ],  \"name\" : \"name\",  \"description\" : \"description\",  \"timeInterval\" : \"timeInterval\",  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "deleteJob", notes = "deletes a single job based on the ID supplied ", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "job deleted "),
        @ApiResponse(code = 200, message = "unexpected error ", response = Error.class) })
    @RequestMapping(value = "/jobs/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteJob(@ApiParam(value = "ID of job to delete ",required=true) @PathVariable("id") String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "retriebeJobs", notes = "Returns a paginates list of jobs ", response = PaginatedJobResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "job response ", response = PaginatedJobResponse.class),
        @ApiResponse(code = 200, message = "unexpected error ", response = Error.class) })
    @RequestMapping(value = "/jobs",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PaginatedJobResponse> retriebeJobs(@ApiParam(value = "the maximum number of results (default=100) ") @Valid @RequestParam(value = "page", required = false) Integer page) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "retrieveJobById", notes = "Returns a job based on a single ID ", response = Job.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "job response ", response = Job.class),
        @ApiResponse(code = 200, message = "unexpected error ", response = Error.class) })
    @RequestMapping(value = "/jobs/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Job> retrieveJobById(@ApiParam(value = "ID of job to retrieve ",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"useCase\" : \"useCase\",  \"processingTool\" : \"processingTool\",  \"created\" : \"2000-01-23T04:56:07.000+00:00\",  \"areaOfInterest\" : {    \"extent\" : [ -151.17018, -151.17018, -151.17018, -151.17018 ]  },  \"inputs\" : [ null, null ],  \"name\" : \"name\",  \"description\" : \"description\",  \"timeInterval\" : \"timeInterval\",  \"id\" : \"id\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
